;;; ESP82xx base definitions*******************************************
; Basic definitions used in ESP82xx environments                      ;
; *********************************************************************



[regular_platform]
build_unflags             =
build_flags               = ${core_2_6_2.build_flags}
platform                  = ${core_2_6_2.platform}
platform_packages         = ${core_2_6_2.platform_packages}


[core262_sdk3_platform]
build_unflags             =
build_flags               = ${core_2_6_2_sdk3.build_flags}
platform                  = ${core_2_6_2_sdk3.platform}
platform_packages         = ${core_2_6_2_sdk3.platform_packages}

[beta_platform]
build_unflags             =
build_flags               = ${core_stage.build_flags}
platform                  = ${core_stage.platform}



[esp82xx_common]
extends                   = common
board_build.f_cpu         = 80000000L
build_flags               = ${debug_flags.build_flags} ${mqtt_flags.build_flags} -DHTTPCLIENT_1_1_COMPATIBLE=0
build_unflags             = -DDEBUG_ESP_PORT
lib_deps                  = https://github.com/TD-er/ESPEasySerial.git
lib_ignore                = ESP32_ping, ESP32WebServer, IRremoteESP8266, HeatpumpIR, SD(esp8266), SDFS
board                     = esp12e



;;; NORMAL (STABLE) ***************************************************
; normal version with stable plugins                                  ;
; *********************************************************************

[normal]
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
build_flags               = ${regular_platform.build_flags}


[normal_beta]
platform                  = ${beta_platform.platform}
build_flags               = ${beta_platform.build_flags}


;;; TEST  *************************************************************
; additional plugins (and dependend code) that is marked as TESTING   ;
; Includes "normal" + "testing" plugins                               ;
; *********************************************************************

[testing]
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
build_flags               = ${regular_platform.build_flags} -DPLUGIN_BUILD_TESTING

[testing_beta]
platform                  = ${beta_platform.platform}
build_flags               = ${beta_platform.build_flags} -DPLUGIN_BUILD_TESTING


;;; DEV  **************************************************************
; additional plugins (and dependend code) that is in development      ;
; (probably broken or incomplete)                                     ;
; *********************************************************************

[dev]
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
build_flags               = ${regular_platform.build_flags} -DPLUGIN_BUILD_DEV


;;; IR      ***********************************************************
; IR builds                                                           ;
; *********************************************************************

[ir]
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
build_flags               = ${regular_platform.build_flags}
lib_ignore                = ESP32_ping, ESP32WebServer, SD(esp8266), SDFS

[minimal_ir]
extends                   = ir
build_flags               = ${ir.build_flags} -DPLUGIN_BUILD_MINIMAL_IR

[minimal_ir_extended]
extends                   = ir
build_flags               = ${ir.build_flags} -DPLUGIN_BUILD_MINIMAL_IRext

[normal_ir]
extends                   = ir
build_flags               = ${ir.build_flags} -DPLUGIN_BUILD_NORMAL_IR

[normal_ir_extended]
extends                   = ir
build_flags               = ${ir.build_flags} -DPLUGIN_BUILD_IR_EXTENDED

[normal_ir_extended_no_rx]
extends                   = ir
build_flags               = ${ir.build_flags} -DPLUGIN_BUILD_IR_EXTENDED_NO_RX



;;; 1MB flash nodes  **************************************************
; Layout for 1M flash nodes                                           ;
; *********************************************************************
[esp82xx_1M]
extends                   = esp82xx_common
board_build.flash_mode    = dout
board_upload.maximum_size = 786432
build_flags               = -Wl,-Tesp8266.flash.1m128.ld 
                            -DSIZE_1M 
                            -DBUILD_NO_DEBUG
                            ${esp82xx_common.build_flags}

[esp8266_1M]
extends                   = esp82xx_1M
board                     = esp01_1m

[esp8285_1M]
extends                   = esp82xx_1M
board                     = esp8285
build_flags               = ${esp8266_1M.build_flags} -DESP8285


;;; Minimal ***********************************************************
; Minimal build size for OTA                                          ;
; *********************************************************************
[esp82xx_1M_OTA]
extends                   = esp82xx_common
board_build.flash_mode    = dout
board_upload.maximum_size = 616448
build_flags               = ${esp82xx_1M.build_flags} -DPLUGIN_BUILD_MINIMAL_OTA


[esp8266_1M_OTA]
extends                   = esp82xx_1M_OTA
board                     = esp01_1m

[esp8285_1M_OTA]
extends                   = esp82xx_1M_OTA
board                     = esp8285
build_flags               = ${esp82xx_1M_OTA.build_flags} -DESP8285


;;; 2MB flash nodes  **************************************************
; Layout for 2M flash nodes                                           ;
; *********************************************************************

[esp8266_2M256]
extends                   = esp82xx_common
board                     = esp12e
board_build.flash_mode    = dio
board_upload.maximum_size = 1044464
build_flags               = -Wl,-Tesp8266.flash.2m256.ld
                            ${esp82xx_common.build_flags}

[espWroom2M]
extends                   = esp82xx_common
board                     = esp12e
board_build.flash_mode    = dio
board_upload.maximum_size = 1044464
build_flags               = -Wl,-Tesp8266.flash.2m.ld
                            ${esp82xx_common.build_flags}

[espWroom2M256]
extends                   = esp82xx_common
board_build.flash_mode    = dout
board_upload.maximum_size = 1044464
board                     = esp_wroom_02
build_flags               = -Wl,-Tesp8266.flash.2m256.ld
                            ${esp82xx_common.build_flags}


;;; 4MB flash nodes  **************************************************
; Layout for 4M flash nodes                                           ;
; *********************************************************************

[esp8266_4M1M]
extends                   = esp82xx_common
board                     = esp12e
board_build.flash_mode    = dio
board_upload.maximum_size = 1044464
build_flags               = -Wl,-Tesp8266.flash.4m1m.ld
                            ${esp82xx_common.build_flags}

[esp8266_4M2M]
extends                   = esp82xx_common
board                     = esp12e
board_build.flash_mode    = dio
board_upload.maximum_size = 1044464
build_flags               = -Wl,-Tesp8266.flash.4m2m.ld
                            ${esp82xx_common.build_flags}



;;; 16MB flash nodes  *************************************************
; Layout for 16M flash nodes                                          ;
; *********************************************************************

; Configuration for the Wemos D1 mini pro (16M)
; This configuration can only be used with core versions 2.5.0 or newer.
; Performance of 14M SPIFFS is really slow.
; See https://github.com/esp8266/Arduino/issues/5932
[esp8266_16M]
extends                   = esp82xx_common
board                     = esp12e
board_build.flash_mode    = dio
board_upload.maximum_size = 1044464
build_flags               = -Wl,-Tesp8266.flash.16m14m.ld 
                            -DSPIFFS_MAX_OPEN_FILES=20
                            ${esp82xx_common.build_flags}

