;;; Custom builds *****************************************************
; Use either the plugins defined in                                   ;
; pre_custom_esp82xx.py or Custom.h                                   ;
; *********************************************************************


[hard_esp82xx]
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
build_flags               = ${regular_platform.build_flags}
                            -DBUILD_NO_DEBUG
                            -DPLUGIN_BUILD_CUSTOM


; Custom: 4M1M version --------------------------
[env:custom_ESP8266_4M1M]
extends                   = esp8266_4M1M
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
build_flags               = ${regular_platform.build_flags} 
                            ${esp8266_4M1M.build_flags} 
                            -DPLUGIN_BUILD_CUSTOM
lib_ignore                = ESP32_ping, ESP32WebServer
extra_scripts             = pre:pre_custom_esp82xx.py


[env:custom_sdk3_ESP8266_4M1M]
extends                   = esp8266_4M1M
platform                  = ${core_2_6_2_sdk3.platform}
build_flags               = ${core_2_6_2_sdk3.build_flags}
                            ${esp8266_4M1M.build_flags} 
                            -DPLUGIN_BUILD_CUSTOM
lib_ignore                = ESP32_ping, ESP32WebServer
extra_scripts             = pre:pre_custom_esp82xx.py


[env:custom_beta_ESP8266_4M1M]
extends                   = esp8266_4M1M
platform                  = ${beta_platform.platform}
build_flags               = ${beta_platform.build_flags}
                            ${esp8266_4M1M.build_flags}
                            -DPLUGIN_BUILD_CUSTOM
lib_ignore                = ESP32_ping, ESP32WebServer
extra_scripts             = pre:pre_custom_esp82xx.py


; Custom: 4M2M version --------------------------
[env:custom_ESP8266_4M2M]
extends                   = esp8266_4M2M
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
build_flags               = ${regular_platform.build_flags}
                            ${esp8266_4M1M.build_flags}
                            -DPLUGIN_BUILD_CUSTOM
lib_ignore                = ESP32_ping, ESP32WebServer
extra_scripts             = pre:pre_custom_esp82xx.py




;;; NORMAL (STABLE) ***************************************************
; normal version with stable plugins                                  ;
; *********************************************************************

; NORMAL: 1024k version --------------------------
[env:normal_ESP8266_1M]
extends                   = esp8266_1M
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
build_flags               = ${regular_platform.build_flags}
                            ${esp8266_1M.build_flags}


[env:normal_sdk3_ESP8266_1M]
extends                   = esp8266_1M
platform                  = ${core_2_6_2_sdk3.platform}
build_flags               = ${core_2_6_2_sdk3.build_flags}
                            ${esp8266_1M.build_flags}


[env:normal_ESP8266_1M_VCC]
extends                   = esp8266_1M
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
build_flags               = ${regular_platform.build_flags}
                            ${esp8266_1M.build_flags}
                            -D FEATURE_ADC_VCC=true


; NORMAL: 1024k for esp8285 ----------------------
[env:normal_ESP8285_1M]
extends                   = esp8285_1M
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
build_flags               = ${regular_platform.build_flags}
                            ${esp8285_1M.build_flags}


; NORMAL: 2048k WROOM02 version --------------------------
[env:normal_WROOM02_2M]
extends                   = espWroom2M
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
build_flags               = ${regular_platform.build_flags}
                            ${espWroom2M.build_flags}


; NORMAL: 2048k WROOM02 version 256k SPIFFS --------------------------
[env:normal_WROOM02_2M256]
extends                   = espWroom2M256
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
build_flags               = ${regular_platform.build_flags}
                            ${espWroom2M256.build_flags}


; NORMAL: 4096k version --------------------------
[env:normal_ESP8266_4M1M]
extends                   = esp8266_4M1M
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
build_flags               = ${regular_platform.build_flags}
                            ${esp8266_4M1M.build_flags}

; NORMAL: 16M version --------------------------
[env:normal_ESP8266_16M]
extends                   = esp8266_16M
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
build_flags               = ${regular_platform.build_flags}
                            ${esp8266_16M.build_flags}


;;; Minimal ***********************************************************
; Minimal build size for OTA                                          ;
; *********************************************************************

[env:minimal_core_242_ESP8266_1M_OTA]
extends                   = esp8266_1M_OTA
platform                  = ${core_2_4_2.platform}
build_flags               = ${core_2_4_2.build_flags}
                            ${esp8266_1M_OTA.build_flags}

[env:minimal_core_242_ESP8285_1M_OTA]
extends                   = esp8285_1M_OTA
platform                  = ${core_2_4_2.platform}
build_flags               = ${core_2_4_2.build_flags}
                            ${esp8285_1M_OTA.build_flags}

[env:minimal_core_261_ESP8266_1M_OTA]
extends                   = esp8266_1M_OTA
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
build_flags               = ${regular_platform.build_flags} 
                            ${esp8266_1M_OTA.build_flags}

[env:minimal_core_261_ESP8285_1M_OTA]
extends                   = esp8285_1M_OTA
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
build_flags               = ${regular_platform.build_flags} 
                            ${esp8285_1M_OTA.build_flags}

[env:minimal_core_261_sdk3_ESP8266_1M_OTA]
extends                   = esp8266_1M_OTA
platform                  = ${core_2_6_2_sdk3.platform}
build_flags               = ${core_2_6_2_sdk3.build_flags} 
                            ${esp8266_1M_OTA.build_flags}

[env:minimal_core_261_sdk3_ESP8285_1M_OTA]
extends                   = esp8285_1M_OTA
platform                  = ${core_2_6_2_sdk3.platform}
build_flags               = ${core_2_6_2_sdk3.build_flags} 
                            ${esp8285_1M_OTA.build_flags}



;;; IR      ***********************************************************
; IR builds                                                           ;
; *********************************************************************


; Minimal IR: 1024k version --------------------------
; Build including IR libraries, including extended AC commands
; Minimal set of other plugins
[env:minimal_IRext_ESP8266_1M]
extends                   = esp8266_1M
platform                  = ${minimal_ir_extended.platform}
lib_ignore                = ${minimal_ir_extended.lib_ignore}  
build_flags               = ${minimal_ir_extended.build_flags} 
                            ${esp8266_1M.build_flags}
build_unflags             = ${esp8266_1M_OTA.build_unflags} -DPLUGIN_BUILD_NORMAL_IR


; Minimal IR: 4096k version --------------------------
; Build including IR libraries, INCLUDING extended AC commands
; Includes Extended IR AC commands (takes a lot more program space)
; 4M flash, 1M SPIFFS
[env:minimal_IRext_ESP8266_4M1M]
extends                   = esp8266_4M1M
platform                  = ${minimal_ir_extended.platform} 
lib_ignore                = ${minimal_ir_extended.lib_ignore}
build_flags               = ${minimal_ir_extended.build_flags} 
                            ${esp8266_4M1M.build_flags}

; 4M flash, 2M SPIFFS
[env:minimal_IRext_ESP8266_4M2M]
extends                   = esp8266_4M2M
platform                  = ${minimal_ir_extended.platform} 
lib_ignore                = ${minimal_ir_extended.lib_ignore}
build_flags               = ${minimal_ir_extended.build_flags}
                            ${esp8266_4M2M.build_flags}


; NORMAL IR: 4096k version --------------------------
; Build including IR libraries, INCLUDING extended AC commands
; Includes Extended IR AC commands (takes a lot more program space)
; 4M flash, 2M SPIFFS
[env:normal_IRext_no_rx_ESP8266_4M2M]
extends                   = esp8266_4M2M
platform                  = ${normal_ir_extended_no_rx.platform} 
lib_ignore                = ${normal_ir_extended_no_rx.lib_ignore}
build_flags               = ${normal_ir_extended_no_rx.build_flags}
                            ${esp8266_4M2M.build_flags}



;;; TEST  *************************************************************
; additional plugins (and dependend code) that is marked as TESTING   ;
; Includes "normal" + "testing" plugins                               ;
; *********************************************************************


; TEST: 4096k version + FEATURE_ADC_VCC ----------
[env:test_ESP8266_4M1M_VCC]
extends                   = esp8266_4M1M
platform                  = ${testing.platform}
build_flags               = ${testing.build_flags}
                            ${esp8266_4M1M.build_flags}
                            -DFEATURE_ADC_VCC=true

; TEST: 4096k version + FEATURE_ADC_VCC + FEATURE_MDNS + FEATURE_SD ----------
[env:test_ESP8266_4M1M_VCC_MDNS_SD]
extends                   = esp8266_4M1M
platform                  = ${testing.platform}
build_flags               = ${testing.build_flags}
                            ${esp8266_4M1M.build_flags}
                            -DFEATURE_ADC_VCC=true
                            -DFEATURE_MDNS
                            -DFEATURE_SD
lib_ignore                = ESP32_ping, ESP32WebServer, IRremoteESP8266, HeatpumpIR


[env:test_beta_ESP8266_4M1M]
extends                   = esp8266_4M1M
platform                  = ${testing_beta.platform}
build_flags               = ${testing_beta.build_flags}
                            ${esp8266_4M1M.build_flags}


[env:test_beta_ESP8266_16M]
extends                   = esp8266_16M
platform                  = ${testing_beta.platform}
build_flags               = ${testing_beta.build_flags}
                            ${esp8266_16M.build_flags} 
                            -DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22y







;;; DEV  **************************************************************
; additional plugins (and dependend code) that is in development      ;
; (probably broken or incomplete)                                     ;
; *********************************************************************

; DEV : 4096k version ----------------------------
[env:dev_ESP8266_4M1M]
extends                   = esp8266_4M1M
platform                  = ${dev.platform}
build_flags               = ${dev.build_flags} 
                            ${esp8266_4M1M.build_flags}



;;; HARDWARE SPECIFIC VERSIONS ***********************************************************
; versions specially designed to fit, and contents only needed plugins for each hardware ;
; ****************************************************************************************

; ITEAD Products

; ITEAD / SONOFF BASIC version ------------------
;[env:hard_SONOFF_BASIC]
;extends                   = esp8266_1M, hard_esp82xx
;platform                  = ${hard_esp82xx.platform}
;platform_packages         = ${hard_esp82xx.platform_packages}
;build_flags               = ${hard_esp82xx.build_flags} ${esp8266_1M.build_flags} -D PLUGIN_SET_SONOFF_BASIC


; ITEAD / SONOFF TH10/TH16 version -------------------
;[env:hard_SONOFF_TH1x]
;extends                   = esp8266_1M, hard_esp82xx
;platform                  = ${hard_esp82xx.platform}
;platform_packages         = ${hard_esp82xx.platform_packages}
;build_flags               = ${hard_esp82xx.build_flags} ${esp8266_1M.build_flags} -D PLUGIN_SET_SONOFF_TH1x

; ITEAD / SONOFF POW & POW R2 version --------------------
; Sonoff Pow (ESP8266 - HLW8012)
; GPIO00 Button
; GPIO05 HLW8012 Sel output
; GPIO12 Red Led and Relay (0 = Off, 1 = On)
; GPIO13 HLW8012 CF1 voltage / current
; GPIO14 HLW8012 CF power
; GPIO15 Blue Led (0 = On, 1 = Off)

; Sonoff Pow R2 (ESP8266 4M flash - CSE7766)
; GPIO00 Button
; GPIO01 Serial RXD 4800 baud 8E1 CSE7766 energy sensor
; GPIO03 Serial TXD
; GPIO12 Red Led and Relay (0 = Off, 1 = On)
; GPIO13 Blue Led (0 = On, 1 = Off)
[env:hard_SONOFF_POW_4M1M]
extends                   = esp8266_4M1M, hard_esp82xx
platform                  = ${hard_esp82xx.platform}
platform_packages         = ${hard_esp82xx.platform_packages}
build_flags               = ${hard_esp82xx.build_flags} 
                            ${esp8266_4M1M.build_flags}
                            -D PLUGIN_SET_SONOFF_POW


; Build including power measurement plugins for those devices that have only 1M flash.
; For example those made by BlitzWolf SHP
[env:hard_other_POW_ESP8285_1M]
extends                   = esp8266_1M_OTA, hard_esp82xx
platform                  = ${hard_esp82xx.platform}
platform_packages         = ${hard_esp82xx.platform_packages}
build_flags               = ${hard_esp82xx.build_flags} 
                            ${esp8266_1M_OTA.build_flags}
                            -D PLUGIN_SET_SONOFF_POW


; ITEAD / SONOFF S20 version --------------------
;[env:hard_SONOFF_S20]
;extends                   = esp8266_1M_OTA, hard_esp82xx
;platform                  = ${hard_esp82xx.platform}
;platform_packages         = ${hard_esp82xx.platform_packages}
;build_flags               = ${hard_esp82xx.build_flags} ${esp8266_1M_OTA.build_flags} -D PLUGIN_SET_SONOFF_S2x


; ITEAD / SONOFF 4CH version --------------------
;[env:hard_SONOFF_4CH]
;extends                   = esp8285_1M_OTA, hard_esp82xx
;platform                  = ${hard_esp82xx.platform}
;platform_packages         = ${hard_esp82xx.platform_packages}
;build_flags               = ${hard_esp82xx.build_flags} ${esp8285_1M_OTA.build_flags} -D PLUGIN_SET_SONOFF_4CH



; ITEAD / SONOFF TOUCH version ------------------
;[env:hard_SONOFF_TOUCH]
;extends                   = esp8285_1M_OTA, hard_esp82xx
;platform                  = ${hard_esp82xx.platform}
;platform_packages         = ${hard_esp82xx.platform_packages}
;build_flags               = ${hard_esp82xx.build_flags} ${esp8285_1M_OTA.build_flags} -D PLUGIN_SET_SONOFF_TOUCH


; Shelly1 Open Source (ESP8266-2MB)
; https://shelly.cloud/shelly1-open-source/
; GPIO04 Relay (non inverted)
; GPIO05 Button
[env:hard_Shelly_1_2M256]
extends                   = esp8266_2M256, hard_esp82xx
platform                  = ${hard_esp82xx.platform}
platform_packages         = ${hard_esp82xx.platform_packages}
build_flags               = ${hard_esp82xx.build_flags} 
                            ${esp8266_2M256.build_flags}
                            -D PLUGIN_SET_SHELLY_1

; Ventus W266 weather station
; https://www.letscontrolit.com/wiki/index.php/VentusW266
[env:hard_Ventus_W266]
extends                   = esp8266_1M, hard_esp82xx
platform                  = ${hard_esp82xx.platform}
platform_packages         = ${hard_esp82xx.platform_packages}
build_flags               = ${hard_esp82xx.build_flags}
                            ${esp8266_1M_OTA.build_flags}
                            -D PLUGIN_SET_VENTUS_W266


